type Query {
  paymentPointer(id: String!): PaymentPointer

  asset(id: String!): Asset

  "Fetch a page of assets."
  assets(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): AssetsConnection!

  peer(id: String!): Peer

  "Fetch a page of peers."
  peers(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): PeersConnection!

  quote(id: String!): Quote
  outgoingPayment(id: String!): OutgoingPayment
}

type Mutation {
  createPaymentPointer(
    input: CreatePaymentPointerInput!
  ): CreatePaymentPointerMutationResponse!

  updatePaymentPointerCredential(
    input: UpdatePaymentPointerCredentialInput!
  ): UpdatePaymentPointerCredentialResponse!

  triggerPaymentPointerEvents(
    limit: Int!
  ): TriggerPaymentPointerEventsMutationResponse!

  "Create asset"
  createAsset(input: CreateAssetInput!): AssetMutationResponse!

  "Update asset withdrawal threshold"
  updateAssetWithdrawalThreshold(
    input: UpdateAssetInput!
  ): AssetMutationResponse!

  "Create peer"
  createPeer(input: CreatePeerInput!): CreatePeerMutationResponse!

  "Update peer"
  updatePeer(input: UpdatePeerInput!): UpdatePeerMutationResponse!

  "Delete peer"
  deletePeer(id: String!): DeletePeerMutationResponse!

  "Add peer liquidity"
  addPeerLiquidity(input: AddPeerLiquidityInput!): LiquidityMutationResponse

  "Add asset liquidity"
  addAssetLiquidity(input: AddAssetLiquidityInput!): LiquidityMutationResponse

  "Create liquidity withdrawal from peer"
  createPeerLiquidityWithdrawal(
    input: CreatePeerLiquidityWithdrawalInput!
  ): LiquidityMutationResponse

  "Create liquidity withdrawal from asset"
  createAssetLiquidityWithdrawal(
    input: CreateAssetLiquidityWithdrawalInput!
  ): LiquidityMutationResponse

  "Create liquidity withdrawal from Open Payments payment pointer"
  createPaymentPointerWithdrawal(
    input: CreatePaymentPointerWithdrawalInput!
  ): PaymentPointerWithdrawalMutationResponse

  "Posts liquidity withdrawal"
  postLiquidityWithdrawal(
    "The id of the liquidity withdrawal to post."
    withdrawalId: String!
  ): LiquidityMutationResponse

  "Void liquidity withdrawal"
  voidLiquidityWithdrawal(
    "The id of the liquidity withdrawal to void."
    withdrawalId: String!
  ): LiquidityMutationResponse

  createQuote(input: CreateQuoteInput!): QuoteResponse!

  createOutgoingPayment(
    input: CreateOutgoingPaymentInput!
  ): OutgoingPaymentResponse!

  createIncomingPayment(
    input: CreateIncomingPaymentInput!
  ): IncomingPaymentResponse!

  createReceiver(input: CreateReceiverInput!): CreateReceiverResponse!

  "Deposit webhook event liquidity"
  depositEventLiquidity(eventId: String!): LiquidityMutationResponse

  "Withdraw webhook event liquidity"
  withdrawEventLiquidity(eventId: String!): LiquidityMutationResponse

  "Create payment pointer key"
  createPaymentPointerKey(
    input: CreatePaymentPointerKeyInput!
  ): CreatePaymentPointerKeyMutationResponse

  revokePaymentPointerKey(id: String!): RevokePaymentPointerKeyMutationResponse
}

type PageInfo {
  "Paginating forwards: the cursor to continue."
  endCursor: String
  "Paginating forwards: Are there more pages?"
  hasNextPage: Boolean!
  "Paginating backwards: Are there more pages?"
  hasPreviousPage: Boolean!
  "Paginating backwards: the cursor to continue."
  startCursor: String
}

input UpdatePaymentPointerCredentialInput {
  paymentPointerId: String!
  credentialId: String!
}

type AssetsConnection {
  pageInfo: PageInfo!
  edges: [AssetEdge!]!
}

type AssetEdge {
  node: Asset!
  cursor: String!
}

input CreateAssetInput {
  code: String!
  scale: Int!
  withdrawalThreshold: UInt64
}

input UpdateAssetInput {
  id: String!
  withdrawalThreshold: UInt64
}

type PeersConnection {
  pageInfo: PageInfo!
  edges: [PeerEdge!]!
}

type PeerEdge {
  node: Peer!
  cursor: String!
}

input CreatePeerInput {
  maxPacketAmount: UInt64
  http: HttpInput!
  assetId: String!
  staticIlpAddress: String!
  name: String
}

input UpdatePeerInput {
  id: String!
  maxPacketAmount: UInt64
  http: HttpInput
  staticIlpAddress: String
  name: String
}

input HttpInput {
  incoming: HttpIncomingInput
  outgoing: HttpOutgoingInput!
}

input HttpIncomingInput {
  authTokens: [String!]!
}

input HttpOutgoingInput {
  authToken: String!
  endpoint: String!
}

input AssetInput {
  code: String!
  scale: Int!
}

input AddPeerLiquidityInput {
  "The id of the peer to add liquidity."
  peerId: String!
  "Amount of liquidity to add."
  amount: UInt64!
  "The id of the transfer."
  id: String!
}

input AddAssetLiquidityInput {
  "The id of the asset to add liquidity."
  assetId: String!
  "Amount of liquidity to add."
  amount: UInt64!
  "The id of the transfer."
  id: String!
}

input CreatePeerLiquidityWithdrawalInput {
  "The id of the peer to create the withdrawal for."
  peerId: String!
  "Amount of withdrawal."
  amount: UInt64!
  "The id of the withdrawal."
  id: String!
}

input CreateAssetLiquidityWithdrawalInput {
  "The id of the asset to create the withdrawal for."
  assetId: String!
  "Amount of withdrawal."
  amount: UInt64!
  "The id of the withdrawal."
  id: String!
}

input CreatePaymentPointerWithdrawalInput {
  "The id of the Open Payments payment pointer to create the withdrawal for."
  paymentPointerId: String!
  "The id of the withdrawal."
  id: String!
}

input JwkInput {
  kid: String!
  x: String!
  alg: Alg!
  kty: Kty!
  crv: Crv!
}

input CreatePaymentPointerKeyInput {
  paymentPointerId: String!
  jwk: JwkInput!
}

type Asset implements Model {
  id: ID!
  code: String!
  scale: Int!
  withdrawalThreshold: UInt64
  createdAt: String!
}

enum LiquidityError {
  AlreadyPosted
  AlreadyVoided
  AmountZero
  InsufficientBalance
  InvalidId
  TransferExists
  UnknownAsset
  UnknownIncomingPayment
  UnknownPayment
  UnknownPaymentPointer
  UnknownPeer
  UnknownTransfer
}

type Peer implements Model {
  id: ID!
  maxPacketAmount: UInt64
  http: Http!
  asset: Asset!
  staticIlpAddress: String!
  name: String
  createdAt: String!
}

type Http {
  outgoing: HttpOutgoing!
}

type HttpOutgoing {
  authToken: String!
  endpoint: String!
}

type PaymentPointer implements Model {
  id: ID!
  asset: Asset!
  url: String!
  publicName: String
  credentialId: String
  incomingPayments(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): IncomingPaymentConnection
  quotes(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): QuoteConnection
  outgoingPayments(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): OutgoingPaymentConnection
  createdAt: String!
}

type IncomingPaymentConnection {
  pageInfo: PageInfo!
  edges: [IncomingPaymentEdge!]!
}

type IncomingPaymentEdge {
  node: IncomingPayment!
  cursor: String!
}

type IncomingPayment implements Model {
  id: ID!
  paymentPointerId: ID!
  state: IncomingPaymentState!
  expiresAt: String!
  incomingAmount: Amount
  receivedAmount: Amount!
  description: String
  externalRef: String
  createdAt: String!
}

type Receiver {
  id: String!
  paymentPointerUrl: String!
  completed: Boolean!
  incomingAmount: Amount
  receivedAmount: Amount!
  expiresAt: String
  description: String
  externalRef: String
  createdAt: String!
  updatedAt: String!
}

enum IncomingPaymentState {
  "The payment has a state of PENDING when it is initially created."
  PENDING
  "As soon as payment has started (funds have cleared into the account) the state moves to PROCESSING"
  PROCESSING
  "The payment is either auto-completed once the received amount equals the expected `incomingAmount`, or it is completed manually via an API call."
  COMPLETED
  "If the payment expires before it is completed then the state will move to EXPIRED and no further payments will be accepted."
  EXPIRED
}

type Amount {
  value: UInt64!
  assetCode: String!
  assetScale: Int!
}

type OutgoingPaymentConnection {
  pageInfo: PageInfo!
  edges: [OutgoingPaymentEdge!]!
}

type OutgoingPaymentEdge {
  node: OutgoingPayment!
  cursor: String!
}

type OutgoingPayment implements Model {
  id: ID!
  paymentPointerId: ID!
  state: OutgoingPaymentState!
  error: String
  stateAttempts: Int!
  sendAmount: Amount!
  receiveAmount: Amount!
  receiver: String!
  description: String
  externalRef: String
  quote: Quote
  sentAmount: Amount!
  createdAt: String!
}

enum OutgoingPaymentState {
  "Will transition to SENDING once payment funds are reserved"
  FUNDING
  "Paying, will transition to COMPLETED on success"
  SENDING
  "Successful completion"
  COMPLETED
  "Payment failed"
  FAILED
}

type QuoteConnection {
  pageInfo: PageInfo!
  edges: [QuoteEdge!]!
}

type QuoteEdge {
  node: Quote!
  cursor: String!
}

type Quote {
  id: ID!
  paymentPointerId: ID!
  receiver: String!
  sendAmount: Amount!
  receiveAmount: Amount!
  maxPacketAmount: UInt64!
  minExchangeRate: Float!
  lowEstimatedExchangeRate: Float!
  highEstimatedExchangeRate: Float!
  createdAt: String!
  expiresAt: String!
}

input AmountInput {
  value: UInt64!
  assetCode: String!
  assetScale: Int!
}

input CreateQuoteInput {
  paymentPointerId: String!
  sendAmount: AmountInput
  receiveAmount: AmountInput
  receiver: String!
}

type QuoteResponse {
  code: String!
  success: Boolean!
  message: String
  quote: Quote
}

input CreateOutgoingPaymentInput {
  paymentPointerId: String!
  quoteId: String!
  description: String
  externalRef: String
}

input CreateIncomingPaymentInput {
  paymentPointerId: String!
  expiresAt: String
  description: String
  incomingAmount: AmountInput
  externalRef: String
}

input CreateReceiverInput {
  paymentPointerUrl: String!
  expiresAt: String
  description: String
  incomingAmount: AmountInput
  externalRef: String
}

type OutgoingPaymentResponse {
  code: String!
  success: Boolean!
  message: String
  payment: OutgoingPayment
}

type IncomingPaymentResponse {
  code: String!
  success: Boolean!
  message: String
  payment: IncomingPayment
}

type CreateReceiverResponse {
  code: String!
  success: Boolean!
  message: String
  receiver: Receiver
}

input CreatePaymentPointerInput {
  assetId: String!
  url: String!
  publicName: String
}

enum Alg {
  EdDSA
}

enum Kty {
  OKP
}

enum Crv {
  Ed25519
}

type Jwk {
  kid: String!
  x: String!
  alg: Alg!
  kty: Kty!
  crv: Crv!
}

type PaymentPointerKey implements Model {
  id: ID!
  paymentPointerId: ID!
  jwk: Jwk!
  revoked: Boolean!
  createdAt: String!
}

type PaymentPointerWithdrawal {
  id: ID!
  amount: UInt64!
  paymentPointer: PaymentPointer!
}

interface Model {
  id: ID!
  createdAt: String!
}

type CreatePaymentPointerMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  paymentPointer: PaymentPointer
}

type TriggerPaymentPointerEventsMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  count: Int
}

type AssetMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  asset: Asset
}

type CreatePeerMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  peer: Peer
}

type UpdatePeerMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  peer: Peer
}

type UpdatePaymentPointerCredentialResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  paymentPointer: PaymentPointer
}

type DeletePeerMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type TransferMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type LiquidityMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: LiquidityError
}

type PaymentPointerWithdrawalMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: LiquidityError
  withdrawal: PaymentPointerWithdrawal
}

type CreatePaymentPointerKeyMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  paymentPointerKey: PaymentPointerKey
}

type RevokePaymentPointerKeyMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  paymentPointerKey: PaymentPointerKey
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

scalar UInt64
